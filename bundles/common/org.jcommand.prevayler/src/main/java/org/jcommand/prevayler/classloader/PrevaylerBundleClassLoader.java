package org.jcommand.prevayler.classloader;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.osgi.framework.Bundle;
import org.osgi.framework.namespace.PackageNamespace;
import org.osgi.framework.wiring.BundleCapability;
import org.osgi.framework.wiring.BundleWiring;
import org.prevayler.Prevayler;
import org.prevayler.PrevaylerFactory;
import org.prevayler.Transaction;
import org.prevayler.foundation.serialization.JavaSerializer;

public class PrevaylerBundleClassLoader extends ClassLoader {
	
	private static Prevayler<Map<Integer,Set<BundleCapability>>> capabilityDB;
	
	// TODO FH: move to ds service
	static{
		PrevaylerFactory<Map<Integer,Set<BundleCapability>>> factory = new PrevaylerFactory<Map<Integer,Set<BundleCapability>>>();
		factory.configureSnapshotSerializer(new JavaSerializer());
		factory.configureJournalSerializer(new JavaSerializer());
		// TODO FH: add configuration system
		factory.configurePrevalenceDirectory("c:\\jcommand\\queue.persistence.version");
		Map<Integer,Set<BundleCapability>> db = new HashMap<Integer,Set<BundleCapability>>();
		factory.configurePrevalentSystem(db);
		try {
			capabilityDB = factory.create();
		} catch (Exception e) {
			// TODO FH: add logger
			e.printStackTrace();
		}
	}

	private List<Bundle> bundles = new ArrayList<Bundle>();
	private Integer dbVersion;

	// TODO FH: search the next version with the new version db service
	public PrevaylerBundleClassLoader(Integer dbVersion){
		this.dbVersion = dbVersion;
	}
	
	public void addBundle(Bundle bundle) {
		bundles.add(bundle);
	}
	
	public void removeBundle(Bundle bundle){
		bundles.remove(bundle);
	}

	@Override
	public Class<?> loadClass(String name) throws ClassNotFoundException {
		for (Bundle bundle : bundles) {
			try {
				Class<?> clazz = bundle.loadClass(name);
				if (clazz != null) {
					trackCapability(bundle);
					return clazz;
				}
			} catch (ClassNotFoundException cnfe) {
				//check next classloader 
			}
		}
		throw new ClassNotFoundException("Prevayler ClassLoader can't find class:" + name);
	}

	
	private void trackCapability(Bundle bundle){
		BundleWiring wiring = bundle.adapt(BundleWiring.class);

		List<BundleCapability> capabilities = wiring.getCapabilities(PackageNamespace.PACKAGE_NAMESPACE);
		for (BundleCapability capability : capabilities) {
			capabilityDB.execute(new SaveCapability(dbVersion, capability));
		}
	}
	
	class SaveCapability implements Transaction<Map<Integer,Set<BundleCapability>>> {
		/**
		 * auto generated by eclipse 4.6
		 */
		private static final long serialVersionUID = 5042733252315464821L;
		
		private BundleCapability capability;

		private Integer dbVersion;

		SaveCapability(Integer dbVersion, BundleCapability capability){
			this.dbVersion = dbVersion;
			this.capability = capability;
		}
		
		@Override
		public void executeOn(Map<Integer,Set<BundleCapability>> db, Date date) {
			if(!db.containsKey(dbVersion)){
				db.put(dbVersion, new HashSet<BundleCapability>(100));
			}
			db.get(dbVersion).add(capability);			
		}
		
	}
}
